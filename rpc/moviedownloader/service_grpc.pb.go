// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package moviedownloader

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MovieDownloaderServiceClient is the client API for MovieDownloaderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MovieDownloaderServiceClient interface {
	Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error)
	Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*Empty, error)
	Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (MovieDownloaderService_ProgressClient, error)
	Completed(ctx context.Context, in *CompletedRequest, opts ...grpc.CallOption) (*CompletedResponse, error)
}

type movieDownloaderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMovieDownloaderServiceClient(cc grpc.ClientConnInterface) MovieDownloaderServiceClient {
	return &movieDownloaderServiceClient{cc}
}

func (c *movieDownloaderServiceClient) Search(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*SearchResponse, error) {
	out := new(SearchResponse)
	err := c.cc.Invoke(ctx, "/moviedownloader.MovieDownloaderService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDownloaderServiceClient) Download(ctx context.Context, in *DownloadRequest, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/moviedownloader.MovieDownloaderService/Download", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *movieDownloaderServiceClient) Progress(ctx context.Context, in *ProgressRequest, opts ...grpc.CallOption) (MovieDownloaderService_ProgressClient, error) {
	stream, err := c.cc.NewStream(ctx, &_MovieDownloaderService_serviceDesc.Streams[0], "/moviedownloader.MovieDownloaderService/Progress", opts...)
	if err != nil {
		return nil, err
	}
	x := &movieDownloaderServiceProgressClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MovieDownloaderService_ProgressClient interface {
	Recv() (*ProgressResponse, error)
	grpc.ClientStream
}

type movieDownloaderServiceProgressClient struct {
	grpc.ClientStream
}

func (x *movieDownloaderServiceProgressClient) Recv() (*ProgressResponse, error) {
	m := new(ProgressResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *movieDownloaderServiceClient) Completed(ctx context.Context, in *CompletedRequest, opts ...grpc.CallOption) (*CompletedResponse, error) {
	out := new(CompletedResponse)
	err := c.cc.Invoke(ctx, "/moviedownloader.MovieDownloaderService/Completed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MovieDownloaderServiceServer is the server API for MovieDownloaderService service.
// All implementations should embed UnimplementedMovieDownloaderServiceServer
// for forward compatibility
type MovieDownloaderServiceServer interface {
	Search(context.Context, *SearchRequest) (*SearchResponse, error)
	Download(context.Context, *DownloadRequest) (*Empty, error)
	Progress(*ProgressRequest, MovieDownloaderService_ProgressServer) error
	Completed(context.Context, *CompletedRequest) (*CompletedResponse, error)
}

// UnimplementedMovieDownloaderServiceServer should be embedded to have forward compatible implementations.
type UnimplementedMovieDownloaderServiceServer struct {
}

func (UnimplementedMovieDownloaderServiceServer) Search(context.Context, *SearchRequest) (*SearchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (UnimplementedMovieDownloaderServiceServer) Download(context.Context, *DownloadRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Download not implemented")
}
func (UnimplementedMovieDownloaderServiceServer) Progress(*ProgressRequest, MovieDownloaderService_ProgressServer) error {
	return status.Errorf(codes.Unimplemented, "method Progress not implemented")
}
func (UnimplementedMovieDownloaderServiceServer) Completed(context.Context, *CompletedRequest) (*CompletedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Completed not implemented")
}

// UnsafeMovieDownloaderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MovieDownloaderServiceServer will
// result in compilation errors.
type UnsafeMovieDownloaderServiceServer interface {
	mustEmbedUnimplementedMovieDownloaderServiceServer()
}

func RegisterMovieDownloaderServiceServer(s *grpc.Server, srv MovieDownloaderServiceServer) {
	s.RegisterService(&_MovieDownloaderService_serviceDesc, srv)
}

func _MovieDownloaderService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDownloaderServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviedownloader.MovieDownloaderService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDownloaderServiceServer).Search(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDownloaderService_Download_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDownloaderServiceServer).Download(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviedownloader.MovieDownloaderService/Download",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDownloaderServiceServer).Download(ctx, req.(*DownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MovieDownloaderService_Progress_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProgressRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MovieDownloaderServiceServer).Progress(m, &movieDownloaderServiceProgressServer{stream})
}

type MovieDownloaderService_ProgressServer interface {
	Send(*ProgressResponse) error
	grpc.ServerStream
}

type movieDownloaderServiceProgressServer struct {
	grpc.ServerStream
}

func (x *movieDownloaderServiceProgressServer) Send(m *ProgressResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MovieDownloaderService_Completed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompletedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MovieDownloaderServiceServer).Completed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/moviedownloader.MovieDownloaderService/Completed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MovieDownloaderServiceServer).Completed(ctx, req.(*CompletedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MovieDownloaderService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "moviedownloader.MovieDownloaderService",
	HandlerType: (*MovieDownloaderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Search",
			Handler:    _MovieDownloaderService_Search_Handler,
		},
		{
			MethodName: "Download",
			Handler:    _MovieDownloaderService_Download_Handler,
		},
		{
			MethodName: "Completed",
			Handler:    _MovieDownloaderService_Completed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Progress",
			Handler:       _MovieDownloaderService_Progress_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/service.proto",
}
